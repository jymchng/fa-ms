generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

// Financial Assistance Scheme Models

model Administrator {
  id          String   @id @default(uuid()) @map("id")
  email       String   @unique @map("email")
  password    String   @map("password")
  name        String   @map("name")
  applications Application[] @relation("AdminApplications")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("administrators")
}

model Applicant {
  id                String   @id @default(uuid()) @map("id")
  name              String   @map("name")
  dateOfBirth       DateTime @map("date_of_birth")
  maritalStatus     MaritalStatus @map("marital_status")
  employmentStatus  EmploymentStatus @map("employment_status")
  sex               Sex      @map("sex")
  applications      Application[] @relation("ApplicantApplications")
  householdMembers HouseholdMember[] @relation("ApplicantHouseholdMembers")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("applicants")
}

model HouseholdMember {
  id               String   @id @default(uuid()) @map("id")
  name             String   @map("name")
  dateOfBirth      DateTime @map("date_of_birth")
  sex              Sex      @map("sex")
  employmentStatus EmploymentStatus @map("employment_status")
  relationship     String   @map("relationship")
  applicant        Applicant @relation("ApplicantHouseholdMembers", fields: [applicantId], references: [id])
  applicantId      String   @map("applicant_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("household_members")
}

model Scheme {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name")
  description String   @map("description")
  criteria    Json     @map("criteria")
  benefits    Json     @map("benefits")
  applications Application[] @relation("SchemeApplications")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("schemes")
}

model Application {
  id             String   @id @default(uuid()) @map("id")
  applicant      Applicant @relation("ApplicantApplications", fields: [applicantId], references: [id])
  applicantId    String   @map("applicant_id")
  scheme         Scheme   @relation("SchemeApplications", fields: [schemeId], references: [id])
  schemeId       String   @map("scheme_id")
  administrator  Administrator @relation("AdminApplications", fields: [administratorId], references: [id])
  administratorId String   @map("administrator_id")
  status         ApplicationStatus @map("status")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("applications")
}

enum MaritalStatus {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
}

enum EmploymentStatus {
  EMPLOYED
  UNEMPLOYED
}

enum Sex {
  MALE
  FEMALE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
